{"version":3,"sources":["store/cardsFunctions.ts","store/cardsSlice.ts","store/hooks.ts","assets/images/hero.svg","assets/images/hp0.svg","assets/images/hp1.svg","images.ts","assets/images/foe1.svg","assets/images/foe2.svg","assets/images/foe3.svg","components/Cards.tsx","ai/aiFunctions.ts","ai/optimalCard.ts","components/AIButton.tsx","components/Stats.tsx","store/store.ts","components/Settings.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["getRandomCard","id","range","x","y","chance","Math","random","type","hp","trunc","defaultHero","cardsSlice","createSlice","name","initialState","isAIEnabled","cards","Array","fill","scoreCount","hero","isGameOver","botSpeed","reducers","initFill","state","idCounter","i","j","move","payload","clickedCard","clickedX","clickedY","heroX","heroY","isAvailable","hpChange","countHpChange","min","alert","score","newCards","concat","rowType","swapRowType","row","flat","filter","el","lastRowEl","length","newCard","shiftCards","find","enableAI","disableAI","changeSpeed","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","images","0","heal","5","hp0","6","7","hp1","8","foe","1","2","3","CardsPlace","toolkit","cardSlice","dispatch","useEffect","className","map","Cards","desc","isEnabled","props","character","image","onClick","disabled","src","alt","getAvailableInfo","card","findLowestCard","availableCards","cardsOfType","sort","a","b","countOptimalByHp","alternative","healsOnCards","currCard","healsOnCard","amount","findAmountOfHeals","optimalCard","variant","AIButton","aiMove","setTimeout","cardToPlay","minHeal","minFoe","countAlternative","countCard","startPlaying","Stats","rootReducer","combineReducers","store","configureStore","reducer","Settings","max","defaultValue","onChange","target","value","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3a51677.chunk.js","sourcesContent":["import { Card, Coords } from \"../types\";\r\n\r\nexport const isAvailable = ([clickedX, clickedY]:Coords, [heroX, heroY]:Coords):boolean => {\r\n  if (heroX === clickedX && heroY === clickedY) {\r\n    return false\r\n  }\r\n  return ((heroX + 1 === clickedX || \r\n        heroX - 1 === clickedX) && heroY === clickedY) ||\r\n        ((heroY + 1 === clickedY ||\r\n        heroY - 1 === clickedY) && heroX === clickedX)\r\n}\r\n\r\nexport const shiftCards = (cards:Card[][], hero:Card, clickedCard:Card, score:number) => {\r\n  const newCards:Card[][] = cards.concat()\r\n\r\n  const rowType = hero.x === clickedCard.x ? 'x' : 'y';\r\n  const swapRowType = rowType === 'x' ? 'y' : 'x';\r\n  \r\n  const row = newCards.flat().filter(el => el[rowType] === hero[rowType]);\r\n  \r\n  const lastRowEl = row[clickedCard[swapRowType] < hero[swapRowType] ? row.length - 1 : 0]\r\n  \r\n  newCards[clickedCard.x][clickedCard.y].type = hero.type;\r\n  newCards[clickedCard.x][clickedCard.y].hp = hero.hp\r\n  \r\n  if (lastRowEl.type !== 'hero') {\r\n    newCards[hero.x][hero.y].type = lastRowEl.type;\r\n    newCards[hero.x][hero.y].hp = lastRowEl.hp\r\n  }\r\n  \r\n  const newCard = getRandomCard(lastRowEl.id, [lastRowEl.x, lastRowEl.y], 3)\r\n  \r\n  lastRowEl.type = newCard.type;\r\n  lastRowEl.hp = newCard.hp;\r\n  \r\n  return newCards\r\n}\r\n\r\nexport const getRandomCard = (id:number, [x, y]:[number, number], range:number):Card => {\r\n  const chance = Math.random() * 8 > range;\r\n  return { \r\n    id: id,\r\n    x: x,\r\n    y: y,\r\n    type: chance ? 'foe' : 'heal',\r\n    hp: chance ? Math.trunc(Math.random() * (4 - 1) + 1) : \r\n    Math.trunc(Math.random() * (9 - 5) + 5)\r\n  }\r\n}\r\n\r\nexport const countHpChange = (clickedCard:Card) => (clickedCard.type === 'foe' ? -1 : 1) * clickedCard.hp\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Card, State } from \"../types\";\r\nimport { isAvailable, shiftCards, getRandomCard, countHpChange } from \"./cardsFunctions\";\r\n\r\nconst defaultHero:Card = {\r\n  id: 4,\r\n  x: 1,\r\n  y: 1,\r\n  type: 'hero',\r\n  hp: 10\r\n}\r\n\r\nconst cardsSlice = createSlice({\r\n  name: 'cards',\r\n  initialState: {\r\n    isAIEnabled: false,\r\n    cards: Array(3).fill([]),\r\n    scoreCount: 0,\r\n    hero: defaultHero,\r\n    isGameOver: true,\r\n    botSpeed: 1000,\r\n  },\r\n  reducers: {\r\n    initFill(state:State) {\r\n      let idCounter = -1\r\n      state.isAIEnabled = false\r\n      state.scoreCount = 0\r\n      state.hero = defaultHero\r\n      for (let i = 0; i < 3; i++) {\r\n        for (let j = 0; j < 3; j++) {\r\n          state.cards[i][j] = getRandomCard(++idCounter, [i, j], 3);\r\n        }\r\n      }\r\n      state.cards[state.hero.x][state.hero.y] = state.hero\r\n      state.isGameOver = false\r\n    }, \r\n    move(state:State, { payload: [x, y] }) {\r\n      const clickedCard = state.cards[x][y]\r\n\r\n      if (isAvailable([x, y], [state.hero.x, state.hero.y])) { \r\n        const hpChange =  countHpChange(clickedCard);\r\n\r\n        state.hero.hp = Math.min(state.hero.hp + hpChange, 10)\r\n  \r\n        if (state.hero.hp <= 0) {\r\n          alert(`Game over! Your score ${state.scoreCount}`)\r\n          state.isAIEnabled = false\r\n          state.isGameOver = true\r\n        }\r\n\r\n        if (hpChange < 0 && state.hero.hp > 0) {\r\n          state.scoreCount++\r\n        }\r\n        \r\n        state.cards = shiftCards(state.cards, state.hero, clickedCard, state.scoreCount); \r\n\r\n        state.hero = state.cards.flat().find((el:Card) => el.type === 'hero') as Card        \r\n      }\r\n    },\r\n    enableAI(state:State) {\r\n      state.isAIEnabled = true\r\n    },\r\n    disableAI(state:State) {\r\n      state.isAIEnabled = false\r\n    },\r\n    changeSpeed(state:State, {payload}) {\r\n      state.botSpeed = 1000 - payload\r\n    }\r\n  }\r\n})\r\n\r\nexport default cardsSlice.reducer\r\nexport const {initFill, move, enableAI, disableAI, changeSpeed} = cardsSlice.actions","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","export default __webpack_public_path__ + \"static/media/hero.5b2609bc.svg\";","export default __webpack_public_path__ + \"static/media/hp0.013dd3c2.svg\";","export default __webpack_public_path__ + \"static/media/hp1.17d3ee61.svg\";","import hero from './assets/images/hero.svg'\r\nimport hp0 from './assets/images/hp0.svg'\r\nimport hp1 from './assets/images/hp1.svg'\r\nimport foe1 from './assets/images/foe1.svg'\r\nimport foe2 from './assets/images/foe2.svg'\r\nimport foe3 from './assets/images/foe3.svg'\r\nimport { Images } from './types'\r\n\r\nexport const images:Images = {\r\n  hero: {0: hero},\r\n  heal: {5: hp0, 6: hp0, 7: hp1, 8: hp1},\r\n  foe: {1: foe1, 2: foe2, 3: foe3},\r\n}","export default __webpack_public_path__ + \"static/media/foe1.c477179c.svg\";","export default __webpack_public_path__ + \"static/media/foe2.91be41a9.svg\";","export default __webpack_public_path__ + \"static/media/foe3.b4c66bde.svg\";","import { Card } from '../types';\r\nimport { initFill, move } from '../store/cardsSlice';\r\nimport { useAppDispatch, useAppSelector } from '../store/hooks'\r\nimport { useEffect } from 'react';\r\n\r\nimport '../assets/styles/cards.css'\r\n\r\nimport { images } from '../images';\r\n\r\nexport function CardsPlace() {\r\n  const {cards, isGameOver, isAIEnabled} = useAppSelector(({cardSlice: toolkit}) => {\r\n    return {cards: toolkit.cards.flat(), isGameOver: toolkit.isGameOver, isAIEnabled: toolkit.isAIEnabled}\r\n  })\r\n  const dispatch = useAppDispatch()\r\n  useEffect(() => {\r\n    if (isGameOver) dispatch(initFill())\r\n  }, [isGameOver])\r\n  \r\n  return (\r\n    <div className='cards-place'>\r\n      {cards.map((el:Card) => \r\n        <Cards desc={el} isEnabled={isAIEnabled} key={el.id} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function Cards(props:{desc:Card, isEnabled:boolean}) {\r\n  const dispatch = useAppDispatch()\r\n  const character = props.desc;\r\n\r\n  const image = images[character.type][character.type === 'hero' ? 0 : character.hp]\r\n\r\n  return (\r\n    <button\r\n      className={`card card-${character.type}`} \r\n      onClick={() => {dispatch(move([character.x, character.y]))}}\r\n      disabled={props.isEnabled}>\r\n      <img \r\n        src = {image}\r\n        alt={character.type} \r\n        className='card-image'/>\r\n      <p className='card-text'> {character.hp}{character.type === 'hero' ? '/10' : ''}</p>\r\n    </button>\r\n  )\r\n}","import { Card, CardTypes, Coords, HealsByCard } from \"../types\";\r\n\r\nexport const getAvailableInfo = ([heroX, heroY]:Coords, cards:Card[]):Card[] => {\r\n  return cards.filter(card => \r\n    (card.x === heroX && card.y + 1 === heroY) || \r\n    (card.x === heroX && card.y - 1 === heroY) || \r\n    (card.x + 1 === heroX && card.y === heroY) || \r\n    (card.x - 1 === heroX && card.y === heroY)\r\n  )\r\n}\r\n\r\nexport const findLowestCard = (availableCards:Card[], type:CardTypes):Card | null => {\r\n  const cardsOfType = availableCards.filter(card => card.type === type)\r\n  if (cardsOfType) {\r\n    cardsOfType.sort((a:Card, b:Card) => {///////////////////////////////// \r\n      if (a.hp < b.hp) {\r\n        return -1\r\n      } \r\n      return 1\r\n    })\r\n    return cardsOfType[0]\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport const findAmountOfHeals = (currCard:Card, cards:Card[][]):HealsByCard => {\r\n  const availableCards = getAvailableInfo([currCard.x, currCard.y], cards.flat());\r\n  \r\n  const healsOnCard = availableCards.filter(el => el.type === 'heal').length\r\n  \r\n  return {id: currCard.id, amount: healsOnCard}\r\n}","import { Card, HealsByCard } from \"../types\";\r\nimport { findAmountOfHeals, findLowestCard, getAvailableInfo,  } from \"./aiFunctions\";\r\n\r\nconst countAlternative = (minFoe:Card | null, minHeal:Card | null, hero:Card):Card => {\r\n  if (minHeal) {                      //  Check if the are any heal cards\r\n    if (!minFoe) {                    //  Pick lowest heal if there're no foes\r\n      return minHeal\r\n    } \r\n    if (hero.hp > minFoe.hp + 3) {    //  Check if it's needed to heal\r\n      return minFoe\r\n    }\r\n    return minHeal\r\n  } \r\n  return minFoe as Card\r\n}\r\n\r\nconst countOptimalByHp = (availableCards:Card[], cards:Card[][], alternative:Card, hero:Card):Card => {\r\n  const healsOnCards = availableCards.map(el => findAmountOfHeals(el, cards))\r\n  healsOnCards.sort((a:HealsByCard, b:HealsByCard) => {\r\n    if (a.amount > b.amount) {\r\n      return -1\r\n    } \r\n    return 1\r\n  })\r\n  \r\n  if (healsOnCards[0].amount === 0) { //  Skip counting heals if there are no any\r\n    return alternative\r\n  } \r\n  \r\n  const allOptimalCards = healsOnCards\r\n    .filter(el => el.amount === healsOnCards[0].amount)\r\n    .map(variant => availableCards\r\n      .find(card => card.id === variant.id) as Card)\r\n\r\n  const optimalCard = allOptimalCards.sort((a:Card, b:Card) => {\r\n    if (a.hp < b.hp) {\r\n      return -1\r\n    } \r\n    return 1\r\n  })[0]\r\n  \r\n  if (optimalCard.hp < hero.hp) {\r\n    return optimalCard\r\n  }\r\n  return alternative\r\n}\r\n\r\nexport const countCard = (hero:Card, cards:Card[][]):Card => {\r\n  const availableCards = getAvailableInfo([hero.x, hero.y], cards.flat());\r\n\r\n  const minHeal = findLowestCard(availableCards, 'heal')\r\n  const minFoe = findLowestCard(availableCards, 'foe')\r\n  \r\n  const alternative = countAlternative(minFoe, minHeal, hero)\r\n\r\n  return countOptimalByHp(availableCards, cards, alternative, hero)\r\n}","import { countCard } from '../ai/optimalCard';\r\nimport { move, enableAI, disableAI } from '../store/cardsSlice';\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\"\r\nimport { useEffect } from 'react';\r\n\r\nexport const AIButton = () => {\r\n  const {cards, isGameOver, hero, isAIEnabled, botSpeed} = useAppSelector(({cardSlice: toolkit}) => {\r\n    return {\r\n      cards: toolkit.cards, \r\n      isGameOver: toolkit.isGameOver, \r\n      hero: toolkit.hero, \r\n      isAIEnabled: toolkit.isAIEnabled,\r\n      botSpeed: toolkit.botSpeed,\r\n    }\r\n  })\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (!isGameOver && isAIEnabled) {\r\n      aiMove()\r\n    }\r\n  }, [cards])\r\n\r\n  const aiMove = () => {\r\n    setTimeout(() => {\r\n      const cardToPlay = countCard(hero, cards);\r\n      \r\n      dispatch(move([cardToPlay.x, cardToPlay.y]))\r\n    }, botSpeed)\r\n  }\r\n\r\n  const startPlaying = async () => {\r\n    isAIEnabled ? dispatch(disableAI()) : dispatch(enableAI())\r\n\r\n    aiMove()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <button \r\n        className={`ai-button ${isAIEnabled ? 'ai-active' : ''}`}\r\n        onClick={() => {startPlaying()}}>\r\n        {isAIEnabled ? 'Disable auto play' : 'Enable auto play'}\r\n      </button>\r\n    </>\r\n  )\r\n} ","import { useAppSelector } from '../store/hooks'\r\nimport { AIButton } from './AIButton'\r\n\r\nexport function Stats () {\r\n  const score = useAppSelector(({cardSlice: toolkit}) => {\r\n    return toolkit.scoreCount\r\n  })\r\n  return (\r\n    <div className=\"stats\">\r\n      <h3>\r\n        Score: {score}\r\n      </h3>\r\n      <AIButton />\r\n    </div>\r\n  )\r\n}","import { combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport cardSlice from './cardsSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  cardSlice: cardSlice\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import { changeSpeed } from \"../store/cardsSlice\"\r\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\"\r\n\r\nexport const Settings = () => {\r\n  const {botSpeed} = useAppSelector(({cardSlice: toolkit}) => {\r\n    return {botSpeed: toolkit.botSpeed}\r\n  })\r\n  const dispatch = useAppDispatch()\r\n  const inputChange = ({target}:{target:HTMLInputElement}) => {\r\n    dispatch(changeSpeed(target.value))\r\n  }\r\n  return (\r\n    <div className=\"settings\">\r\n      <input \r\n        className=\"settings__input\" \r\n        type=\"range\" \r\n        min=\"0\" \r\n        max=\"1000\" \r\n        defaultValue={1} \r\n        onChange={inputChange}/>\r\n        <p className=\"setting__text\">AI speed: {Math.trunc((1000 - botSpeed) / 100)}</p>\r\n    </div>\r\n  )\r\n} ","import \"../assets/styles/index.css\"\r\nimport \"../assets/styles/small.css\"\r\nimport { CardsPlace } from \"./Cards\";\r\nimport { Stats } from \"./Stats\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"../store/store\";\r\nimport { Settings } from \"./Settings\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"root\">\r\n        <header>\r\n          <h1>Dungeon Cards AI</h1>\r\n        </header>\r\n        <main>\r\n            <Stats />\r\n            <Settings />\r\n            <CardsPlace />\r\n        </main>\r\n        <footer>\r\n          <a target=\"blank\" href=\"https://github.com/blackpawsstudio\">GitHub</a>\r\n          <a target=\"blank\" href=\"https://play.google.com/store/apps/details?id=com.The717pixels.DungeonCards&hl=ru&gl=US\">Original game</a>\r\n        </footer>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport {render} from 'react-dom';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}